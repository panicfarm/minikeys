use bitcoin::blockdata::script::Instruction;
use bitcoin::secp256k1::{self, Secp256k1};
use bitcoin::sighash;
use bitcoin::{absolute::LockTime, Sequence};
use hex_lit::hex;
use miniscript::interpreter::KeySigPair;
use miniscript::Miniscript;
use miniscript::Segwitv0;

//These are real blockchain transactions examples of computing sighash for:
// - P2WPKH
// - P2MS 2of3
// - P2SH 2of2 multisig
// - P2WSH 2of2 multisig

//run with: cargo run --example sighash

//TODO add P2TR examples, ideally for both key-path and script-path spending

fn main() {
    test_sighash_p2ms_multisig_2x3();
    test_sighash_p2sh_multisig_2x3();
    test_sighash_p2sh_multisig_2x2();
    test_sighash_p2wsh_multisig_2x2();
}

fn test_sighash_p2sh_multisig_2x2() {
    //Spending transactoin:
    //bitcoin-cli getrawtransaction 214646c4b563cd8c788754ec94468ab71602f5ed07d5e976a2b0e41a413bcc0e  3
    //after decoding ScriptSig from the input:0, its last ASM element is the scriptpubkey:
    //bitcoin-cli decodescript 5221032d7306898e980c66aefdfb6b377eaf71597c449bf9ce741a3380c5646354f6de2103e8c742e1f283ef810c1cd0c8875e5c2998a05fc5b23c30160d3d33add7af565752ae
    //its ASM is 2 of 2 multisig: 2 032d7306898e980c66aefdfb6b377eaf71597c449bf9ce741a3380c5646354f6de 03e8c742e1f283ef810c1cd0c8875e5c2998a05fc5b23c30160d3d33add7af5657 2 OP_CHECKMULTISIG
    let raw_tx = hex!("0100000001d611ad58b2f5bc0db7d15dfde4f497d6482d1b4a1e8c462ef077d4d32b3dae7901000000da0047304402203b17b4f64fa7299e8a85a688bda3cb1394b80262598bbdffd71dab1d7f266098022019cc20dc20eae417374609cb9ca22b28261511150ed69d39664b9d3b1bcb3d1201483045022100cfff9c400abb4ce5f247bd1c582cf54ec841719b0d39550b714c3c793fb4347b02201427a961a7f32aba4eeb1b71b080ea8712705e77323b747c03c8f5dbdda1025a01475221032d7306898e980c66aefdfb6b377eaf71597c449bf9ce741a3380c5646354f6de2103e8c742e1f283ef810c1cd0c8875e5c2998a05fc5b23c30160d3d33add7af565752aeffffffff020ed000000000000016001477800cff52bd58133b895622fd1220d9e2b47a79cd0902000000000017a914da55145ca5c56ba01f1b0b98d896425aa4b0f4468700000000");
    let raw_reftx = hex!("0100000001ade1ff3b7e2da73914f831ef20ab26bb861f60b7659ff7de3af07137d973a17402000000da00473044022039c919ba99640e2256b8b56c22278997bfdc24a78b72e9dd7e232d0a5650c01702204a15618469c4f0978e123d391f833f7bc6dc9e3b7d22f79d492e0c70a6aa704701483045022100983973c309c05ab8a6002e1ea663fb44227b1b8eaaaeb2d63e6c39a595f02a78022020fd7cc11660bf10cef660a0256276a9b378d236b30fe3a9f900448a7d5de0b201475221032d7306898e980c66aefdfb6b377eaf71597c449bf9ce741a3380c5646354f6de2103e8c742e1f283ef810c1cd0c8875e5c2998a05fc5b23c30160d3d33add7af565752aeffffffff02b5ba0000000000001976a914c91852f5780f02a7f8884f05037547594ac3cb8988ac5ce002000000000017a914da55145ca5c56ba01f1b0b98d896425aa4b0f4468700000000");
    let raw_script_pubkey = hex!("a914da55145ca5c56ba01f1b0b98d896425aa4b0f44687");

    println!("\nsighash_p2sh_multisig_2x2:");
    vrfy_pks(&raw_tx, 0, &raw_reftx, &raw_script_pubkey);
}

fn test_sighash_p2sh_multisig_2x3() {
    //Spending transactoin:
    //bitcoin-cli getrawtransaction 3
    //after decoding ScriptSig from the input:0, its last ASM element is the scriptpubkey:
    //bitcoin-cli decodescript
    //its ASM is 2 of 3 multisig:
    let raw_tx = hex!("010000000a2aafcf32a7d0998e146f02d9948b8530a7c574f24e51ac4e5f8009dc8121228800000000fdfd000047304402205b959fc960be4256a6fe61f75013beb552f7f78352c4b8ddf5cd9747a7757af702207e540d95c8be8b096976685f61ec9d38ccaf68903c34ada54b9878ce21c40d3b014830450221009d2386c125126dcf7a90b85145b57983c4777b6d31526bb01c3dc44ad6b66d3f02205bfdfe89a6114d2d9e5d27f090fad46393251510777880817db65ada47ee3c49014c69522102261f84d51bb64371cb5e9eec3bbc0c0c7320eb7fa9c5076a394a48a9cd74bfd321023e66621cf94ac25d8bb687abef86d01847805d6e9bff8c3999f18f478cde5ab62102d844059fae247b8e1325f56519d1eb7d4b632ec77b9f71f03102167f3c7fa59153aeffffffff902196cd0936b8854a2f6a748c4a15ce397bb213e59599f809ac823b9fd2dec700000000fdfd0000483045022100dc2e50c9f852edf89a9d295995c91bb07857c3b18e98549b68c2b45a76f4b608022076cfff6d39245b7b8602691cbe9466a254b398d3d9f114a63a59febae645449401473044022012f66786119c435832fb715520232f45c7b541d68db0158c2d1e13b27c7b4dcd022051011c7bb2256236ca238a935bace3f073c851111fa9274fa609422d77cb617f014c69522102261f84d51bb64371cb5e9eec3bbc0c0c7320eb7fa9c5076a394a48a9cd74bfd321023e66621cf94ac25d8bb687abef86d01847805d6e9bff8c3999f18f478cde5ab62102d844059fae247b8e1325f56519d1eb7d4b632ec77b9f71f03102167f3c7fa59153aeffffffff2e9dbb1cabff6041ea2951105f877fb14addb45fa42e70eaec2d1ab17e0d37c300000000fdfe0000483045022100c1510121f06ee1cf200ef9dc19cc5fff5f6a2ec087dc618e39c053eb397722a202203672ac3c49a0d9f332efcd03801bc7d68e9d4bc6b84e77591f22d7088108baca01483045022100baf85a48dd5b90b95e94961a54ce6d004d0ab0d6c82e898f4038654d284ffb77022002719f0b1c5bf069a296df8df40fce65ed5922a6469fd2b5774714b742a59893014c69522102261f84d51bb64371cb5e9eec3bbc0c0c7320eb7fa9c5076a394a48a9cd74bfd321023e66621cf94ac25d8bb687abef86d01847805d6e9bff8c3999f18f478cde5ab62102d844059fae247b8e1325f56519d1eb7d4b632ec77b9f71f03102167f3c7fa59153aeffffffff7ae4f4513dc761a41855b7ec5f111e192fd40f0490aa6b01c0cbb9f32585db9c00000000fdfd0000473044022065ac8212e0fda09bc286169af551fa90ab20b54c28acc8bbb3c44e3a0f2af5de022056d41d30a2b845fba3c0e80d1fe4991b36717608b0bd3e5e31f8a7c5f608a1b9014830450221008f9c17289fcc945e9ffed612a779962faaa477e36400288708766b11e3b75c7602207e2b4994fd7ac2a8d06cf676d4819de1880b597f90ca1a97fac5f92a4af2ffd7014c69522102261f84d51bb64371cb5e9eec3bbc0c0c7320eb7fa9c5076a394a48a9cd74bfd321023e66621cf94ac25d8bb687abef86d01847805d6e9bff8c3999f18f478cde5ab62102d844059fae247b8e1325f56519d1eb7d4b632ec77b9f71f03102167f3c7fa59153aeffffffff924c652d9953c90ba157e17009f3d609f3e9c74944b1905098c34f7cebdf307b01000000fc004730440220229015b2578422b9cfc67a7ae63956cba017efd3a85546dc26b482bd2a0ac3fe02206447c1f8e27784a796ded47988d0ddf57f1ec35bd2e3fea85ce1698f057d7e550147304402206de04ad86eac89ee9faeaadf9111a28c6dbb11f0f13e759dcafdece70c30843702204dd198460c0877eb3c006205750f1d221b76c0a92efadd27c848974545da305a014c69522102d828f488cb7999b5e8f86d96ffdfca8df623b9c69110deb17bebbf078fba5c712102ddb0d4d376eddf45d3342dc10ff990a8824a8ee27cbf677d8b8598e95d39dfa021037ec133aafd59281211f544672eeae73d41c7997c93f339dc7656a8d3dd7564e053aeffffffff9e34c86d4547fa8a66a34cf2261da011e4d7b32110273881678c58ad65af6deb00000000fdfe0000483045022100cf6c69951457ec074ade356043089d9ebadb53cc003be857c0de9c884cac4d6102205616d1ab0e0c11d602247d379436b6500a1d07c774ad61dc944a53cdee1809d101483045022100a7e9e63c92108cc3ac014ddd593755feec949bdae2450de001dadfe94038a1b8022033ba6ca06ee46e3808dd027c27f5cb630fc1bd6807487ec7af2c789854daba4f014c69522102d828f488cb7999b5e8f86d96ffdfca8df623b9c69110deb17bebbf078fba5c712102ddb0d4d376eddf45d3342dc10ff990a8824a8ee27cbf677d8b8598e95d39dfa021037ec133aafd59281211f544672eeae73d41c7997c93f339dc7656a8d3dd7564e053aeffffffffafde87dca43f6b06dbe1520a9389ad31e70af9e3324bf9c1bca013b1bb76fdc900000000fdfd00004730440220727a0e2be9949e991ab5ff203001281127a7b5d13a1b3ca9b7276333f9371b3602206a3f07b6879eae1759046a1ce47b4a303587eaf47aada346b19b8924fb99d80e01483045022100e4a947ccf698f670ef45b5963cd0baced9886defcbdc8f65e951a414f51df86e022010715ee835a68f1c20e3be46b48b80e8f05d587c9edc562e7bf2fa307f21cff8014c695221023cbc2ad2dad9231a9e907a4a69dcfe2514d04db5a0fc5a903361fb892b16be8021027b766284e7c9db06628dd9481c6176dd94524c2317f7ca4e8f1ab549c9fe8da62103a9e76e199de14118b683187c1c7fcbf5427e8cc2c290d5daf1261a716742a69c53aeffffffffdfc3afe3f49543716276373812826f55b9dc4e9f2ee2c858cb0b5e19e33f7c9500000000fdfd00004730440220685655193c0dd894bc348bb5b8ac0247764784b947ab53b538a4f88008749f6402204a4b5912d558aa278a8ee3744ba74384c30420e8d2724ed13b35201fb013437301483045022100ae6da2282de47eb9d655b801b41d1494ccf995753104d9741a0d63bd4646eb1b0220607cbcbe76e6628fe902bf3ea6597400f878e9ef2302ff7ae4e62a70c95babaf014c695221023cbc2ad2dad9231a9e907a4a69dcfe2514d04db5a0fc5a903361fb892b16be8021027b766284e7c9db06628dd9481c6176dd94524c2317f7ca4e8f1ab549c9fe8da62103a9e76e199de14118b683187c1c7fcbf5427e8cc2c290d5daf1261a716742a69c53aeffffffff9de37111afcc701f30167f463c14467ffff8af317837e8b0644220610dcaacc501000000fdfd000047304402207b240fdcde83165df09dcb7b7e9f7fd768106ab648520b47e2d723e6263306cb02201f1f803e8f35a54aeb683d2d22e7215ee03e8a4a584c144a588a6ce0355fc85101483045022100f3ebeab2532d71945fdc945a8ca7b7e46107a0478754938cdf4f82d1a51561b302203ba1e1b33bf6e71032e34c0916f78bb6a333c2049a16b16642ab5638aa6204a6014c695221023c5d83e61fbb07fae23b1ef5600b44e068d79de7025b7c97b4a17103e2e65cf921032b873786d37b7769b1777f43081bd14b6f6d7f5ea26c2362860eda0b2a60116a2103e23f0e9748f618bd53b4b6c23c56714b031623691425c1b5c82c907fdc0f5e0c53aeffffffff554fbce7a6e82360095f213752d97ffa3fc6b1b600d298b72b5e261c83ca614b01000000fdfd000047304402207c9b7e46feedbd77143e81bb4c099cfe0db441e634307a9de2f70305fec2c381022051912c43a004ae2348b440013dd6218136800b89a3a4f1418ca4b27ffa40bf1001483045022100c38e31dfe2437d2fdfeab15a7533c1d3fcb6a7c8d26e5498695cccc43001296c022072e708c8e3a4dbc64dd3a6eac8e2fc0d0a3d55ba746e972b2a5d8275b556ec1d014c695221023d69319c33f4ad28b6518744798ee2a77116d8495785c1cc84d6f219d85ef4f62102678747b4b9aeed0abdc55e02bec75e1eb74fdcd11fee8785ae989ab7b5976c302102882b1281ed00e9b3629f16752f0436932941ea7065f42d4f5725cf4cf153932153aeffffffff0200a3e111000000001976a91442be95374aed1876e1fa0a8ec6a2fa0b0fe1214088ac3dc648000000000017a91442118ab92bfdcfcc884e5edf3063e90f51a3d2488700000000");
    let raw_reftx = hex!("0100000002069dc300e8b6e7ab2bf730031d6a4c992c832901d9d5d812eaf6da4ebc741d40000000006a47304402204a02661c79ff20dec99fc96e7a2002ff8635094536a1b5a0029b6c5dcf9e2c0c02207f9e27917c9d95b9abcb36c3b92bc73cef481f4af37a0a4ea38b3c50c7b8f285012102f7714daa4075cd5d6b72a0e2f1224bb17df25e39b2b39a219a60ee4f8f32c00affffffff7ed464e27690f523437bdd4bdb3a2297ec01f04e135997e0136887ab83e7cec8020000006a473044022030f37e9eac368ad3c39ee8bad572c4fd89db0bd7da02366315053ad434dcf564022010647fa8c2e14c26e174d2fed880fb723ee64c72f460d883018f364701307e5c01210355239b80f3b7a2112edaf5b7fb48dc933f2a26ec359be90e32082163f1b57759ffffffff0294ff03010000000017a91424334fe9a4bb4bffdc2bc0d2e618625070f8362487f2ca0100000000001976a9147196755f5991d8595ed4f227f10fcc62fcd979d888ac00000000");
    let raw_script_pubkey = hex!("a91424334fe9a4bb4bffdc2bc0d2e618625070f8362487");

    println!("\nsighash_p2sh_multisig_2x3:");
    vrfy_pks(&raw_tx, 0, &raw_reftx, &raw_script_pubkey);
}
fn test_sighash_p2wsh_multisig_2x2() {
    //The spending transaction is
    //bitcoin-cli getrawtransaction 2bb157363e7a62d70b92082a9b2c9bb6f329154f816b8d239bd58c35c789a96a  3
    //input 0 (the only input)
    //ScriptPubkey from its Witness data is:
    //bitcoin-cli decodescript 52210289da5da9d3700156db2d01e6362491733f6c886971791deda74b4e9d707190b2210323c437f30384498be79df2990ce5a8de00844e768c0ccce914335b6c26adea7352ae
    //its ASM is 2 0289da5da9d3700156db2d01e6362491733f6c886971791deda74b4e9d707190b2 0323c437f30384498be79df2990ce5a8de00844e768c0ccce914335b6c26adea73 2 OP_CHECKMULTISIG
    let raw_tx = hex!("010000000001011b9eb4122976fad8f809ee4cea8ac8d1c5b6b8e0d0f9f93327a5d78c9a3945280000000000ffffffff02ba3e0d00000000002200201c3b09401aaa7c9709d118a75d301bdb2180fb68b2e9b3ade8ad4ff7281780cfa586010000000000220020a41d0d894799879ca1bd88c1c3f1c2fd4b1592821cc3c5bfd5be5238b904b09f040047304402201c7563e876d67b5702aea5726cd202bf92d0b1dc52c4acd03435d6073e630bac022032b64b70d7fba0cb8be30b882ea06c5f8ec7288d113459dd5d3e294214e2c96201483045022100f532f7e3b8fd01a0edc86de4870db4e04858964d0a609df81deb99d9581e6c2e02206d9e9b6ab661176be8194faded62f518cdc6ee74dba919e0f35d77cff81f38e5014752210289da5da9d3700156db2d01e6362491733f6c886971791deda74b4e9d707190b2210323c437f30384498be79df2990ce5a8de00844e768c0ccce914335b6c26adea7352ae00000000");
    //For the witness transaction sighash computation, we need its referenced output's value from the original transaction:
    //bitcoin-cli getrawtransaction 2845399a8cd7a52733f9f9d0e0b8b6c5d1c88aea4cee09f8d8fa762912b49e1b  3
    let raw_reftx = hex!("02000000000101828b350cf855b1a52b23a17dc89ed4e99e6d70503e1e1519945f75e19e7617c50000000000fdffffff0230c60e0000000000220020781ada670a98cfb276c6d2a78bbf21eb8f3617f4c2288cb16f5ad8741b5d83dd809698000000000016001449176d383a51877682b0f80e24776c015b2fa6d502473044022064b1047b43707baef72e69796c18340cfe74ff3fdb720bd8d6d814df2c61224802204c2c00fe218461eb84f01a885b90f73b90caae7b25e906e43618916cd7bd3a270121033d0f4a852ee6b3cec7bea4296bf6e4a88510fb5ac6da80b95fa8bb3bfc9fd1bb5fae0a00");
    //we need vout 0 value in sats:
    let raw_script_pubkey =
        hex!("0020781ada670a98cfb276c6d2a78bbf21eb8f3617f4c2288cb16f5ad8741b5d83dd");

    println!("\nsighash_p2wsh_multisig_2x2:");
    vrfy_pks(&raw_tx, 0, &raw_reftx, &raw_script_pubkey);
}

fn test_sighash_p2ms_multisig_2x3() {
    //Spending tx:
    //bitcoin-cli getrawtransaction 949591ad468cef5c41656c0a502d9500671ee421fadb590fbc6373000039b693  3
    //Inp 0 scriptSig has 2 sigs
    let raw_tx = hex!("010000000110a5fee9786a9d2d72c25525e52dd70cbd9035d5152fac83b62d3aa7e2301d58000000009300483045022100af204ef91b8dba5884df50f87219ccef22014c21dd05aa44470d4ed800b7f6e40220428fe058684db1bb2bfb6061bff67048592c574effc217f0d150daedcf36787601483045022100e8547aa2c2a2761a5a28806d3ae0d1bbf0aeff782f9081dfea67b86cacb321340220771a166929469c34959daf726a2ac0c253f9aff391e58a3c7cb46d8b7e0fdc4801ffffffff0180a21900000000001976a914971802edf585cdbc4e57017d6e5142515c1e502888ac00000000");
    //Original transaction:
    //bitcoin-cli getrawtransaction 581d30e2a73a2db683ac2f15d53590bd0cd72de52555c2722d9d6a78e9fea510  3
    let raw_reftx = hex!("01000000014563f26698c0ea3ebd85d4767457370d7e2ebbe922a7736dbf70e1d0f8a9aa9c000000008a473044022039294d5c8843a6776d4a2032cf03549f41c634ba5e65898c7816973919e485b902205af1f61f6d7d6a5f32cbe46676303c141fe499288b1be0d8f0c4e80d4c0ecb5701410454ffbc96ef3c26acffa431066915308865d990e044c507e0ab3d26af34a8ba5b4cb3028fe7c91926bb8be47d652dc70ab300e3022f8259db5f79306b601fc66effffffff0190c9190000000000c9524104d81fd577272bbe73308c93009eec5dc9fc319fc1ee2e7066e17220a5d47a18314578be2faea34b9f1f8ca078f8621acd4bc22897b03daa422b9bf56646b342a24104ec3afff0b2b66e8152e9018fe3be3fc92b30bf886b3487a525997d00fd9da2d012dce5d5275854adc3106572a5d1e12d4211b228429f5a7b2f7ba92eb0475bb14104b49b496684b02855bc32f5daefa2e2e406db4418f3b86bca5195600951c7d918cdbe5e6d3736ec2abf2dd7610995c3086976b2c0c7b4e459d10b34a316d5a5e753ae00000000");
    //Out 0 scriptPubKey.type “multisig” has 3 uncompressed pubkeys
    let raw_script_pubkey = hex!("524104d81fd577272bbe73308c93009eec5dc9fc319fc1ee2e7066e17220a5d47a18314578be2faea34b9f1f8ca078f8621acd4bc22897b03daa422b9bf56646b342a24104ec3afff0b2b66e8152e9018fe3be3fc92b30bf886b3487a525997d00fd9da2d012dce5d5275854adc3106572a5d1e12d4211b228429f5a7b2f7ba92eb0475bb14104b49b496684b02855bc32f5daefa2e2e406db4418f3b86bca5195600951c7d918cdbe5e6d3736ec2abf2dd7610995c3086976b2c0c7b4e459d10b34a316d5a5e753ae");

    println!("\nsighash_p2ms_multisig_2x3:");
    vrfy_pks(&raw_tx, 0, &raw_reftx, &raw_script_pubkey);
}

/// Finds the valid PubKeys in a verified segwit multisig transaction input that spends a p2wsh output with "witness_v0_scripthash" scriptPubKey.type
///
/// # Arguments
///
/// * `raw_tx` - spending tx hex
/// * `inp_idx` - spending tx input index
/// * `value` - ref tx output value in sats
fn vrfy_pks(mut raw_tx: &[u8], inp_idx: usize, mut raw_reftx: &[u8], raw_script_pubkey: &[u8]) {
    let tx: bitcoin::Transaction =
        bitcoin::consensus::Decodable::consensus_decode(&mut raw_tx).unwrap();
    let reftx: bitcoin::Transaction =
        bitcoin::consensus::Decodable::consensus_decode(&mut raw_reftx).unwrap();
    let script_pubkey = bitcoin::ScriptBuf::from_bytes(raw_script_pubkey.to_vec());
    let interpreter = miniscript::Interpreter::from_txdata(
        &script_pubkey,
        &tx.input[inp_idx].script_sig,
        &tx.input[inp_idx].witness,
        Sequence::ZERO,
        LockTime::ZERO,
    )
    .unwrap();
    println!("is_p2pk()			= {}", script_pubkey.is_p2pk());
    println!("is_p2pkh()		= {}", script_pubkey.is_p2pkh());
    println!("is_v0_p2wpkh()	= {}", script_pubkey.is_v0_p2wpkh());
    println!("is_v0_p2wsh()		= {}", script_pubkey.is_v0_p2wsh());
    println!("is_v1_p2tr()		= {}", script_pubkey.is_v1_p2tr());
    println!("is_p2sh()			= {}", script_pubkey.is_p2sh());
    println!(
        "legacy {} script_code {:?}",
        interpreter.is_legacy(),
        interpreter
            .inferred_descriptor()
            .unwrap()
            .script_code()
            .unwrap()
    );

    let secp = Secp256k1::new();
    let prevouts = sighash::Prevouts::All::<bitcoin::TxOut>(&reftx.output);
    let iter = interpreter.iter_custom(Box::new(|key_sig: &KeySigPair| {
        let res = interpreter.verify_sig(&secp, &tx, inp_idx, &prevouts, key_sig);
        let (pk, ecdsa_sig) = key_sig.as_ecdsa().expect("Ecdsa Sig");
        //println!(" tx {:?}", &tx);
        println!("{}<->\t{}", pk, ecdsa_sig.sig);
        if res {
            println!("Success pk {}", pk);
        }
        res
    }));

    for elem in iter {}
}
